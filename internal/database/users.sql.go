// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at, email, hashed_password) 
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAll = `-- name: DeleteAll :exec
DELETE FROM users
`

func (q *Queries) DeleteAll(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAll)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUsrChirpyRed = `-- name: UpdateUsrChirpyRed :one
UPDATE users SET updated_at = $2, is_chirpy_red = $3 WHERE id = $1 RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUsrChirpyRedParams struct {
	ID          uuid.UUID
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) UpdateUsrChirpyRed(ctx context.Context, arg UpdateUsrChirpyRedParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsrChirpyRed, arg.ID, arg.UpdatedAt, arg.IsChirpyRed)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUsrEmailPwd = `-- name: UpdateUsrEmailPwd :one
UPDATE users SET updated_at = $2, email = $3, hashed_password = $4 WHERE id = $1 RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUsrEmailPwdParams struct {
	ID             uuid.UUID
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUsrEmailPwd(ctx context.Context, arg UpdateUsrEmailPwdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsrEmailPwd,
		arg.ID,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}
